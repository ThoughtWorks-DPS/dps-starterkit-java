buildscript {
    dependencies {
        classpath "io.twdps.starter:plugins:${starter_boot_version}"
        classpath "io.twdps.starter:cookiecutter:${starter_boot_version}"
        classpath "se.patrikerdes:gradle-use-latest-versions-plugin:${use_latest_versions_plugin_version}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${versions_plugin_version}"
    }
    // There's a conflict between versions of jgit between spotless and axion release plugin
    configurations.classpath {
        resolutionStrategy {
            force 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
        }
    }
}


plugins {
    id("org.ajoberstar.grgit") version "${grgit_plugin_version}" apply false
    id("org.springframework.boot") version "${spring_boot_plugin_version}" apply false
    id("io.swagger.swaggerhub") version "${swaggerhub_plugin_version}" apply false
    id("com.diffplug.spotless") version "${spotless_plugin_version}" apply false
    id("com.palantir.docker") version "${palantir_docker_plugin_version}" apply false
    id("com.palantir.docker-run") version "${palantir_docker_run_plugin_version}" apply false
//    id("com.cdsap.talaiot") version "${talaiot_plugin_version}" apply false
//    id("com.cdsap.talaiot.plugin.base") version "${talaiot_plugin_base_version}" apply false
    id("net.rdrei.android.buildtimetracker") version "${buildtimetracker_plugin_version}" apply false
    id("pl.allegro.tech.build.axion-release") version "${axion_release_plugin_version}" apply false
    id("io.gatling.gradle") version "${gatling_plugin_version}" apply false
    id("com.github.ben-manes.versions") version "${versions_plugin_version}" apply false
    id("se.patrikerdes.use-latest-versions") version "${use_latest_versions_plugin_version}" apply false
    id("io.twdps.starter.plugin.cookiecutter") version "${starter_boot_version}" apply false
    id("com.github.johnrengelman.processes") version "${processes_plugin_version}" apply false
    id("org.springdoc.openapi-gradle-plugin") version "${openapi_gradle_plugin_version}" apply false
    id("org.flywaydb.flyway") version "${flyway_plugin_version}" apply false
    id("com.felipefzdz.gradle.shellcheck") version "${shellcheck_plugin_version}" apply false
    id("org.barfuin.gradle.jacocolog") version "${jacocolog_plugin_version}" apply false
    id("org.barfuin.gradle.taskinfo") version "${taskinfo_plugin_version}"
    id("org.asciidoctor.jvm.pdf") version "${asciidoctor_plugin_version}" apply false
    id("org.asciidoctor.jvm.gems") version "${asciidoctor_plugin_version}" apply false
    id("org.asciidoctor.jvm.convert") version "${asciidoctor_plugin_version}" apply false
    id("starter.java.build-utils-property-conventions") version "${starter_boot_version}"
    id("starter.java.release-conventions") version "${starter_boot_version}"
    id("starter.metrics.build-time-tracker-conventions") version "${starter_boot_version}"
    id("starter.java.versions-conventions") version "${starter_boot_version}"
    id("starter.java.test-jacoco-aggregation-conventions") version "${starter_boot_version}"
    id('starter.java.doc-mkdocs-conventions') version "${starter_boot_version}"
}

ext {
    jacoco_enforce_violations = true
    jacoco_minimum_coverage = 0.8
    codeModules = [':app',
                   ':api',
                   ':controller',
                   ':data',
                   ':persistence:impl',
                   ':persistence:model',
                   ':service:activator',
                   ':service:provider',
                   ':service:spi']
    dockerModules = [':app',
                     ':container-init',
                     ':db-init',
                     ':opa-init']
}

// Support pre-commit hooks, need spotlessCheck and spotlessApply
def spotlessCheck = tasks.register('spotlessCheck') {
    dependsOn gradle.includedBuild('skeleton').task(":spotlessCheck")
}

def spotlessApply = tasks.register('spotlessApply') {
    dependsOn gradle.includedBuild('skeleton').task(":spotlessApply")
}

tasks.named('clean').configure {
    codeModules.each {
        dependsOn gradle.includedBuild('skeleton').task("${it}:clean")
    }
    dockerModules.each {
        dependsOn gradle.includedBuild('skeleton').task("${it}:clean")
    }
    dependsOn ':templates:clean'
}

tasks.named('build').configure {
    mustRunAfter tasks.named('clean')
    codeModules.each {
        dependsOn gradle.includedBuild('skeleton').task("${it}:build")
    }
    dockerModules.each {
        dependsOn gradle.includedBuild('skeleton').task("${it}:build")
    }
}

tasks.named('check').configure {
    //mustRunAfter tasks.named('build')
    codeModules.each {
        dependsOn gradle.includedBuild('skeleton').task("${it}:check")
    }
    dockerModules.each {
        dependsOn gradle.includedBuild('skeleton').task("${it}:check")
    }
}

def dockerTask = tasks.register('docker') {
    mustRunAfter tasks.named('clean')
    mustRunAfter tasks.named('build')
    dockerModules.each {
        dependsOn gradle.includedBuild('skeleton').task("${it}:docker")
    }
}

def devloop = tasks.register('devloop') {
    group = "Workflow"
    description = "Rebuild code, docker images, and restart docker-compose"
    dependsOn gradle.includedBuild('skeleton').task(":devloop")
}


def restartloop = tasks.register('restartloop') {
    group = "Workflow"
    description = "Stop docker-compose, delete unused images, continue with devloop task"
    dependsOn gradle.includedBuild('skeleton').task(":restartloop")
}

def resetloop = tasks.register('resetloop') {
    group = "Workflow"
    description = "Clean code, remove docker volumes, continue with restartloop task"
    dependsOn gradle.includedBuild('skeleton').task(":resetloop")
}

def ccdiff = tasks.register('ccdiff') {
    group = "Workflow"
    description = "From template, generate, format, and compare skeleton code"
    dependsOn ':templates:clean'
    dependsOn ':templates:generateTemplate'
    dependsOn ':templates:formatTemplate'
    dependsOn ':templates:compareTemplate'
}

def ccloop = tasks.register('ccloop') {
    group = "Workflow"
    description = "From template, generate, format, compare, and build/test skeleton code"
    dependsOn ccdiff
    dependsOn ':templates:buildTemplate'
}


