version: '3.9'

networks:
  internal:
  external:

volumes:
  pgdata:

services:
  opa:
    image: openpolicyagent/opa
    hostname: opa
    expose:
      - "8181"
    ports:
      - "8181:8181"
    command:
      - run
      - --server
      - --log-level
      - debug
    networks:
      - internal
      - external

  postgres1:
    image: postgres
    hostname: postgres1
    expose:
      - "5432"
    environment:
      POSTGRES_USER: {{cookiecutter.PKG_SERVICE_NAME}}_flyway
      POSTGRES_PASSWORD: not-the-password
      POSTGRES_DB: {{cookiecutter.PKG_SERVICE_NAME}}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal
# NOTE, security favors removing external access from the database container
#      - external
#    ports:
#      - "5432:5432"

  db-init:
    image: {{cookiecutter.DOCKER_REGISTRY}}/{{cookiecutter.PROJECT_NAME}}-db-init:latest
    # NOTE: These are the defaults from the flyway.conf   uncomment to override, esp for secrethub passwords
    #    environment:
    #      FLYWAY_URL: jdbc:postgresql://postgres1:5432/{{cookiecutter.PKG_SERVICE_NAME}}
    #      FLYWAY_USER: {{cookiecutter.PKG_SERVICE_NAME}}_flyway
    #      FLYWAY_PASSWORD: not-the-password
    #      FLYWAY_PLACEHOLDERS_USERNAME: {{cookiecutter.PKG_SERVICE_NAME}}_user
    #      FLYWAY_PLACEHOLDERS_SERVICENAME: {{cookiecutter.PKG_SERVICE_NAME}}_service
    #      FLYWAY_PLACEHOLDERS_ADMINNAME: {{cookiecutter.PKG_SERVICE_NAME}}_admin
    #      FLYWAY_PLACEHOLDERS_DBNAME: {{cookiecutter.PKG_SERVICE_NAME}}
    #      FLYWAY_PLACEHOLDERS_SCHEMANAME: {{cookiecutter.PKG_SERVICE_NAME}}
    #      FLYWAY_PLACEHOLDERS_USERPASSWORD: also-not-the-user-password
    #      FLYWAY_PLACEHOLDERS_SERVICEPASSWORD: also-not-the-service-password
    #      FLYWAY_PLACEHOLDERS_ADMINPASSWORD: also-not-the-admin-password
    depends_on:
      - postgres1
    networks:
      - internal

  opa-init:
    image: {{cookiecutter.DOCKER_REGISTRY}}/{{cookiecutter.PROJECT_NAME}}-opa-init:latest
    depends_on:
      - opa
    networks:
      - internal

  starter-java:
    image: {{cookiecutter.DOCKER_REGISTRY}}/{{cookiecutter.PROJECT_NAME}}-app:latest
    hostname: starter
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      POSTGRES_HOST: postgres1
      POSTGRES_DBNAME: {{cookiecutter.PKG_SERVICE_NAME}}
      POSTGRES_USER: {{cookiecutter.PKG_SERVICE_NAME}}_service
      POSTGRES_PASSWORD: also-not-the-service-password
      JAVA_PROFILE: "-Dspring.profiles.include=compose"
    depends_on:
      - postgres1
      - db-init
    networks:
      - internal
      - external

  jaeger:
    image: jaegertracing/all-in-one:1.20
    hostname: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT : "9411"
    networks:
      - internal
      - external

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    networks:
      - internal

  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_HOST_NAME: kafka #192.168.99.100
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal
      - external
